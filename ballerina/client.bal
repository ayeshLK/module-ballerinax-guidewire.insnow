// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# This OpenAPI specification outlines the interface for the Guidewire InsuranceNow Cloud API version 5.0.0, providing a comprehensive description of available endpoints, operations, parameters, request bodies, and response structures for integrating with the cloud-based insurance platform, InsuranceNow. Designed to streamline operations for insurance companies, InsuranceNow offers functionalities including policy management, claims management, and customer engagement. The API enables developers to access and manipulate insurance data, facilitating automation, custom integrations, and workflow enhancements. Key features include policy management, claims processing, and customer management.
public isolated client class Client {
    final http:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Returns a list of supported countries.
    #
    # + sortType - Indicates the method used to sort the results by name.
    # + return - Successful response. 
    resource isolated function get addresses/countries("asc"|"desc" sortType = "asc") returns ListCountry|error {
        string resourcePath = string `/addresses/countries`;
        map<anydata> queryParam = {"sortType": sortType};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListCountry response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Returns the AddressCountryTemplate bean for the given IsoCd (e.g. US).
    #
    # + isoCd - ISO Country code.
    # + return - Successful response 
    resource isolated function get addresses/countries/[string isoCd]() returns AddressCountryTemplate|error {
        string resourcePath = string `/addresses/countries/${getEncodedUri(isoCd)}`;
        AddressCountryTemplate response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Fills an address from a Google Places search. Using the placeId from a Google Places search, an address will be returned that has all of the address components filled. If the placeId is not known, Google Places will be called to search and fill the address components.
    #
    # + addressLine - The address line to have Google Places search and fill the address components.
    # + placeId - Place Id from the Google Places search.
    # + return - Successful response. 
    resource isolated function get addresses/googlePlacesFill(string? addressLine = (), string? placeId = ()) returns Address|error {
        string resourcePath = string `/addresses/googlePlacesFill`;
        map<anydata> queryParam = {"addressLine": addressLine, "placeId": placeId};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Address response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Indicates whether a given address is already verified.
    #
    # + return - Successful response. 
    resource isolated function post addresses/isVerifiedRequest(Address payload) returns error? {
        string resourcePath = string `/addresses/isVerifiedRequest`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Normalizes, verifies, and provides a more complete address. The verified address may include additional address properties. The response either returns one or more addresses that match the given address, or it will return an error if the address cannot be verified. If more than one address is returned, select an address and then resubmit the API request to perform address verification on the selected address.
    #
    # + addressType - Indicates the requested format of the address after verification. Uncombined returns the street address in components. The default is Combined.
    # + return - Successful response. 
    resource isolated function post addresses/verificationRequest(ListAddress payload, "Combined"|"Uncombined" addressType = "Combined") returns error? {
        string resourcePath = string `/addresses/verificationRequest`;
        map<anydata> queryParam = {"addressType": addressType};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Returns a list of quotes or applications.
    #
    # + applicationOrQuoteNumber - Application or quote number.
    # + continuationId - Indicates the starting offset for the API results when you want to return a specific portion of the full results. You can use this parameter with the limit parameter. For example, the limit on your first API call was 100 and the results populated a list on the page. To request the next page of 100 results, call the API again with continuationId=101 and limit=100.
    # + createdSinceDate - Select applications where application creation date is equal to or greater than the provided createdSinceDate.
    # + customerId - Customer ID number.
    # + includeClosed - Includes closed applications. If true, results will include "Closed" applications. If false (or not provided), results will not include "Closed" applications.
    # + includeDeleted - Includes deleted applications. If true, results will include "Deleted" applications. If false (or not provided), results will not include "Deleted" applications.
    # + 'limit - The maximum number of results to return.
    # + optionalFields - Comma-delimited list of optional fields to be included. Currently supports customer and product.
    # + policyId - Policy ID.
    # + providerId - Provider code number.
    # + recentlyViewed - Finds applications recently viewed by the caller/user. If true, results will be restricted to applications recently viewed by the caller/user. If false (or not provided), results will not be restricted to applications recently viewed by the caller/user.
    # + status - Application status (e.g. In Process).
    # + transactionCd - Transaction code (e.g. New Business) Use where a specific transactionCd(s) is known. Accepts a comma-separated list of values. Ignored when transactionCdGroup contains a value.
    # + transactionCdGroup - Find applications by transactionCdGroup. Use when a specific transactionCd(s) is not known. Accepts a comma-separated list of values. Valid values are Quote, Cancellation, Renewal, or Other.
    # + 'type - Application type. Valid values are Application, QuickQuote, or Quote.
    # + return - Successful operation. 
    resource isolated function get applications(string? applicationOrQuoteNumber = (), string? continuationId = (), string? createdSinceDate = (), string? customerId = (), boolean? includeClosed = (), boolean? includeDeleted = (), string? 'limit = (), string? optionalFields = (), string? policyId = (), string? providerId = (), boolean? recentlyViewed = (), string? status = (), string? transactionCd = (), string? transactionCdGroup = (), string? 'type = ()) returns ListApplication|error {
        string resourcePath = string `/applications`;
        map<anydata> queryParam = {"applicationOrQuoteNumber": applicationOrQuoteNumber, "continuationId": continuationId, "createdSinceDate": createdSinceDate, "customerId": customerId, "includeClosed": includeClosed, "includeDeleted": includeDeleted, "limit": 'limit, "optionalFields": optionalFields, "policyId": policyId, "providerId": providerId, "recentlyViewed": recentlyViewed, "status": status, "transactionCd": transactionCd, "transactionCdGroup": transactionCdGroup, "type": 'type};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListApplication response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Starts a new QuickQuote or Quote. To create a QuickQuote, basicPolicy productVersionIdRef (e.g. Homeowners-1.00.00), providerRef (e.g. 19), and effectiveDt strings are required. To create a Quote, basicPolicy productVersionIdRef, providerRef, and effectiveDt strings, plus one piece of insured information to create a customer, are required.
    #
    # + requestedTypeCd - Starts a quote of the specified type. Valid values are QuickQuote or Quote. If a type is not specified, a QuickQuote will be created if the selected product supports quick quotes and you can perform quick quotes; otherwise, a Quote will be created. If QuickQuote is specified but the selected product does not support quick quotes or you cannot perform quick quotes, then either a 400 or 403 response code will be returned.
    # + return - Successful response. 
    resource isolated function post applications(Quote payload, string? requestedTypeCd = ()) returns error? {
        string resourcePath = string `/applications`;
        map<anydata> queryParam = {"requestedTypeCd": requestedTypeCd};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Delete the quote or application.
    #
    # + systemId - System identifier of the quote or application.
    # + return - Successful operation. 
    resource isolated function delete applications/[string systemId]() returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}`;
        return self.clientEp->delete(resourcePath);
    }

    # Converts a quote to an application.
    #
    # + systemId - System identifier of the quote.
    # + return - Successful response. 
    resource isolated function post applications/[string systemId]/bindRequest() returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/bindRequest`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request);
    }

    # Converts a QuickQuote to a Quote.
    #
    # + systemId - System identifier of the quote.
    # + return - Successful response. 
    resource isolated function post applications/[string systemId]/convertToQuoteRequest() returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/convertToQuoteRequest`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request);
    }

    # Returns a list of documents for a quote or application.
    #
    # + systemId - System identifier of the application.
    # + return - Successful response. 
    resource isolated function get applications/[string systemId]/documents() returns ListDocument|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/documents`;
        ListDocument response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Adds an attachment to a quote or application.
    #
    # + systemId - System identifier of the application.
    # + return - Successful response. 
    resource isolated function post applications/[string systemId]/documents(Attachment payload) returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/documents`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Deletes an attachment associated with a quote or application. Requires the attachment ref number (e.g. "Attachment-26808155-290885540").
    #
    # + systemId - System identifier of the application.
    # + documentId - The identifier of the document.
    # + return - Successful operation. 
    resource isolated function delete applications/[string systemId]/documents/[string documentId]() returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/documents/${getEncodedUri(documentId)}`;
        return self.clientEp->delete(resourcePath);
    }

    # Downloads a document for a quote or application. Requires the attachment ref number (e.g. "Attachment-26808155-290885540").
    #
    # + systemId - System identifier of the application.
    # + documentId - The identifier of the document.
    # + return - Successful operation. 
    resource isolated function get applications/[string systemId]/documents/[string documentId]/content() returns byte[]|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/documents/${getEncodedUri(documentId)}/content`;
        byte[] response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Returns a list of the drivers or non-drivers of a quote or application.
    #
    # + systemId - System identifier of the quote or application.
    # + continuationId - Indicates the starting offset for the API results when you want to return a specific portion of the full results.
    # + includeDeleted - Includes deleted drivers/non-drivers. If true, results will include "Deleted" drivers/non-drivers. If false (or not provided), results will not include "Deleted" drivers/non-drivers.
    # + 'limit - For pagination -- the maximum number of results to return.
    # + typeCd - Filter by type of driver.
    # + return - Successful operation. 
    resource isolated function get applications/[string systemId]/drivers(string? continuationId = (), boolean? includeDeleted = (), string? 'limit = (), "Driver"|"NonDriver"? typeCd = ()) returns ListDriver|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers`;
        map<anydata> queryParam = {"continuationId": continuationId, "includeDeleted": includeDeleted, "limit": 'limit, "typeCd": typeCd};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListDriver response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Creates a new driver or non-driver. You must include a partyTypeCd (DriverParty or NonDriverParty). Other details may be required depending on the insurance product being quoted.
    #
    # + systemId - System identifier of the quote or application.
    # + return - Successful response. 
    resource isolated function post applications/[string systemId]/drivers(Driver payload) returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Returns details about a driver or non-driver.
    #
    # + systemId - System identifier of the quote or application.
    # + driverNumber - Driver/non-driver number.
    # + return - Successful operation. 
    resource isolated function get applications/[string systemId]/drivers/[int:Signed32 driverNumber]() returns Driver|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers/${getEncodedUri(driverNumber)}`;
        Driver response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Replaces the details about a driver or non-driver.
    #
    # + systemId - System identifier of the quote or application.
    # + driverNumber - Driver/non-driver number.
    # + return - Successful operation. 
    resource isolated function put applications/[string systemId]/drivers/[int:Signed32 driverNumber](Driver payload) returns Driver|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers/${getEncodedUri(driverNumber)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Driver response = check self.clientEp->put(resourcePath, request);
        return response;
    }

    # Deletes a driver/non-driver.
    #
    # + systemId - System identifier of the quote or application.
    # + driverNumber - Driver/non-driver number.
    # + return - Successful operation. 
    resource isolated function delete applications/[string systemId]/drivers/[int:Signed32 driverNumber]() returns error? {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers/${getEncodedUri(driverNumber)}`;
        return self.clientEp->delete(resourcePath);
    }

    # Makes changes to details about a driver/non-driver.
    #
    # + systemId - System identifier of the quote or application.
    # + driverNumber - Driver/non-driver number.
    # + return - Successful operation. 
    resource isolated function patch applications/[string systemId]/drivers/[int:Signed32 driverNumber](Driver payload) returns Driver|error {
        string resourcePath = string `/applications/${getEncodedUri(systemId)}/drivers/${getEncodedUri(driverNumber)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Driver response = check self.clientEp->patch(resourcePath, request);
        return response;
    }

    # Returns the list of documents attached to a claim.
    #
    # + systemId - System identifier of the claim.
    # + return - Successful operation. 
    resource isolated function get claims/[string systemId]/documents() returns ListDocument|error {
        string resourcePath = string `/claims/${getEncodedUri(systemId)}/documents`;
        ListDocument response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Adds an attachment to a claim.
    #
    # + systemId - System identifier of the claim.
    # + return - Successful response. 
    resource isolated function post claims/[string systemId]/documents(DocumentDetail payload) returns error? {
        string resourcePath = string `/claims/${getEncodedUri(systemId)}/documents`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Returns a list of notes for a claim.
    #
    # + systemId - System identifier of the claim.
    # + return - Successful operation. 
    resource isolated function get claims/[string systemId]/notes() returns ListNote|error {
        string resourcePath = string `/claims/${getEncodedUri(systemId)}/notes`;
        ListNote response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Adds a note to a claim.
    #
    # + systemId - System identifier of the claim.
    # + return - Successful response. 
    resource isolated function post claims/[string systemId]/notes(NoteDetail payload) returns error? {
        string resourcePath = string `/claims/${getEncodedUri(systemId)}/notes`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request);
    }

    # Returns a list of policies.
    #
    # + continuationId - Indicates the starting list value for the API results when you want to return a specific portion of the full results. You can use this parameter with the limit parameter. For example, if the limit on your first API call was 10 and the results populated a list on the page. To request the next page of 10 results, call the API again with continuationId=11 and limit=10.
    # + createdSinceDate - Selects policies where policy creation date is equal to or greater than the provided createdSinceDate (e.g. 2020-01-01).
    # + customerId - Finds policies by customer id (e.g. 212).
    # + expiredDateAfter - Selects policies where policy expiration date is equal to or lesser than the provided expirationDateBefore (e.g. 2020-01-01).
    # + includePriorTerms - Includes prior terms.If true, results will include prior terms. If false (or not provided), results will not include prior terms.
    # + 'limit - Indicates how many results to return.
    # + optionalFields - Comma-delimited list of optional fields to be included. Currently supports customer and product.
    # + policyNumber - Finds policies by policyNumber (e.g. HO00000058).
    # + providerRef - Filters policies by provider identifier (e.g. 28).
    # + recentlyViewed - Limits policies to those recently viewed by the caller or user. If true, results will be restricted to policies recently viewed by the caller or user. If false (or not provided), results will not be restricted to policies recently viewed by the caller or user.
    # + status - Finds policies by policy status (e.g Active).
    # + return - Successful operation. 
    resource isolated function get policies(string? continuationId = (), string? createdSinceDate = (), string? customerId = (), string? expiredDateAfter = (), boolean? includePriorTerms = (), string? 'limit = (), string? optionalFields = (), string? policyNumber = (), string? providerRef = (), boolean? recentlyViewed = (), string? status = ()) returns ListPolicy|error {
        string resourcePath = string `/policies`;
        map<anydata> queryParam = {"continuationId": continuationId, "createdSinceDate": createdSinceDate, "customerId": customerId, "expiredDateAfter": expiredDateAfter, "includePriorTerms": includePriorTerms, "limit": 'limit, "optionalFields": optionalFields, "policyNumber": policyNumber, "providerRef": providerRef, "recentlyViewed": recentlyViewed, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListPolicy response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Returns the full details of a policy.
    #
    # + systemId - System identifier of the policy.
    # + asOfDate - Returns the policy details from a specified date (e.g. 2021-01-01). If not provided, the current date will be used.
    # + return - Successful operation. 
    resource isolated function get policies/[string systemId](string? asOfDate = ()) returns PolicyDetails|error {
        string resourcePath = string `/policies/${getEncodedUri(systemId)}`;
        map<anydata> queryParam = {"asOfDate": asOfDate};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        PolicyDetails response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Updates the preferred delivery method and insured email address of the policy. Requires the systemId.
    #
    # + systemId - System identifier of the policy.
    # + return - Successful operation. 
    resource isolated function patch policies/[string systemId](PolicyDetails payload) returns PolicyDetails|error {
        string resourcePath = string `/policies/${getEncodedUri(systemId)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        PolicyDetails response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
}
